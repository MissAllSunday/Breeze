C:37:"PHPUnit\Runner\DefaultTestResultCache":7790:{a:2:{s:7:"defects";a:13:{s:84:"Breeze\Repository\StatusRepositoryTest::testSave with data set "happy happy joy joy"";i:4;s:87:"Breeze\Repository\StatusRepositoryTest::testSave with data set "InvalidStatusException"";i:4;s:56:"Breeze\Repository\StatusRepositoryTest::testGetByProfile";i:4;s:92:"Breeze\Repository\StatusRepositoryTest::testGetByProfile with data set "happy happy joy joy"";i:4;s:95:"Breeze\Repository\StatusRepositoryTest::testGetByProfile with data set "InvalidStatusException"";i:3;s:88:"Breeze\Repository\StatusRepositoryTest::testGetByProfile with data set "data from query"";i:3;s:90:"Breeze\Repository\StatusRepositoryTest::testDeleteById with data set "happy happy joy joy"";i:4;s:93:"Breeze\Repository\StatusRepositoryTest::testDeleteById with data set "InvalidStatusException"";i:3;s:94:"Breeze\Repository\StatusRepositoryTest::testDeleteById with data set "InvalidCommentException"";i:3;s:85:"Breeze\Repository\CommentRepositoryTest::testSave with data set "happy happy joy joy"";i:3;s:89:"Breeze\Repository\CommentRepositoryTest::testSave with data set "InvalidCommentException"";i:3;s:93:"Breeze\Repository\CommentRepositoryTest::testGetByProfile with data set "happy happy joy joy"";i:3;s:97:"Breeze\Repository\CommentRepositoryTest::testGetByProfile with data set "InvalidCommentException"";i:3;}s:5:"times";a:86:{s:84:"Breeze\Repository\StatusRepositoryTest::testSave with data set "happy happy joy joy"";d:0.001;s:87:"Breeze\Repository\StatusRepositoryTest::testSave with data set "InvalidStatusException"";d:0;s:31:"PersistenceTest::testGetMessage";d:0;s:60:"PersistenceTest::testSetMessage with data set "empty params"";d:0;s:55:"PersistenceTest::testSetMessage with data set "no type"";d:0;s:58:"PersistenceTest::testSetMessage with data set "happy path"";d:0;s:46:"RequestTest::testGet with data set "sanitized"";d:0;s:46:"RequestTest::testGet with data set "not found"";d:0;s:50:"RequestTest::testGet with data set "default value"";d:0;s:51:"RequestTest::testSanitize with data set "sanitized"";d:0;s:45:"RequestTest::testSanitize with data set "int"";d:0;s:47:"RequestTest::testSanitize with data set "empty"";d:0;s:58:"SettingsTest::testGetSetting with data set "string exists"";d:0;s:57:"SettingsTest::testGetSetting with data set "use fallback"";d:0;s:63:"SettingsTest::testGetSetting with data set "empty setting name"";d:0;s:55:"SettingsTest::testEnable with data set "setting enable"";d:0;s:57:"SettingsTest::testEnable with data set "setting disabled"";d:0;s:62:"SettingsTest::testModSetting with data set "modSetting exists"";d:0;s:69:"SettingsTest::testModSetting with data set "modSetting doesnt exists"";d:0;s:61:"SettingsTest::testModSetting with data set "empty modSetting"";d:0;s:48:"SettingsTest::testIsJson with data set "is json"";d:0;s:52:"SettingsTest::testIsJson with data set "is not json"";d:0;s:51:"SettingsTest::testIsJson with data set "empty json"";d:0;s:54:"SettingsTest::testGlobal with data set "global exists"";d:0;s:61:"SettingsTest::testGlobal with data set "global doesnt exists"";d:0;s:48:"TextTest::testGetSmf with data set "text exists"";d:0;s:55:"TextTest::testGetSmf with data set "text doesnt exists"";d:0;s:49:"TextTest::testGetText with data set "text exists"";d:0;s:56:"TextTest::testGetText with data set "text doesnt exists"";d:0;s:51:"TextTest::testParserText with data set "empty text"";d:0;s:55:"TextTest::testParserText with data set "no replacement"";d:0;s:52:"TextTest::testParserText with data set "normal text"";d:0;s:50:"TextTest::testParserText with data set "href text"";d:0;s:57:"TextTest::testCommaSeparated with data set "alphanumeric"";d:0;s:50:"TextTest::testCommaSeparated with data set "alpha"";d:0;s:52:"TextTest::testCommaSeparated with data set "numeric"";d:0;s:50:"TextTest::testCommaSeparated with data set "empty"";d:0;s:52:"TextTest::testCommaSeparated with data set "no type"";d:0;s:29:"TextTest::testNormalizeString";d:0;s:52:"TextTest::testFormatBytes with data set "happy path"";d:0;s:49:"TextTest::testFormatBytes with data set "no unit"";d:0;s:53:"TextTest::testTruncateText with data set "happy path"";d:0;s:61:"TextTest::testTruncateText with data set "smaller than limit"";d:0;s:56:"TextTest::testTruncateText with data set "different pad"";d:0;s:52:"TextTest::testTruncateText with data set "no string"";d:0;s:51:"TextTest::testTimeElapsed with data set "years ago"";d:0;s:47:"TextTest::testTimeElapsed with data set "hours"";d:0;s:48:"TextTest::testTimeElapsed with data set "minute"";d:0;s:65:"Breeze\Util\PermissionsTest::testIsAllowedTo with data set "nope"";d:0;s:64:"Breeze\Util\PermissionsTest::testIsAllowedTo with data set "yep"";d:0;s:57:"DeleteCommentTest::testClean with data set "empty values"";d:0.003;s:55:"DeleteCommentTest::testClean with data set "happy path"";d:0;s:60:"DeleteCommentTest::testClean with data set "incomplete data"";d:0;s:60:"DeleteCommentTest::testIsValidInt with data set "happy path"";d:0;s:58:"DeleteCommentTest::testIsValidInt with data set "not ints"";d:0;s:72:"DeleteCommentTest::testAreValidUsers with data set "happy happy joy joy"";d:0;s:66:"DeleteCommentTest::testAreValidUsers with data set "invalid users"";d:0;s:62:"DeleteCommentTest::testPermissions with data set "not allowed"";d:0;s:55:"PostCommentTest::testClean with data set "empty values"";d:0;s:53:"PostCommentTest::testClean with data set "happy path"";d:0;s:58:"PostCommentTest::testClean with data set "incomplete data"";d:0;s:58:"PostCommentTest::testIsValidInt with data set "happy path"";d:0;s:56:"PostCommentTest::testIsValidInt with data set "not ints"";d:0;s:61:"PostCommentTest::testIsValidString with data set "happy path"";d:0;s:63:"PostCommentTest::testIsValidString with data set "not a string"";d:0;s:69:"PostCommentTest::testFloodControl with data set "happy happy joy joy"";d:0;s:89:"PostCommentTest::testFloodControl with data set "time has not expired, too much messages"";d:0;s:85:"PostCommentTest::testFloodControl with data set "time has expired, too much messages"";d:0;s:89:"PostCommentTest::testFloodControl with data set "time has not expired,  allowed messages"";d:0;s:60:"PostCommentTest::testPermissions with data set "not allowed"";d:0;s:56:"Breeze\Repository\StatusRepositoryTest::testGetByProfile";d:0;s:92:"Breeze\Repository\StatusRepositoryTest::testGetByProfile with data set "happy happy joy joy"";d:0;s:95:"Breeze\Repository\StatusRepositoryTest::testGetByProfile with data set "InvalidStatusException"";d:0;s:88:"Breeze\Repository\StatusRepositoryTest::testGetByProfile with data set "data from query"";d:0;s:90:"Breeze\Repository\StatusRepositoryTest::testDeleteById with data set "happy happy joy joy"";d:0;s:93:"Breeze\Repository\StatusRepositoryTest::testDeleteById with data set "InvalidStatusException"";d:0;s:94:"Breeze\Repository\StatusRepositoryTest::testDeleteById with data set "InvalidCommentException"";d:0;s:87:"Breeze\Repository\StatusRepositoryTest::testGetById with data set "happy happy joy joy"";d:0;s:90:"Breeze\Repository\StatusRepositoryTest::testGetById with data set "InvalidStatusException"";d:0;s:85:"Breeze\Repository\CommentRepositoryTest::testSave with data set "happy happy joy joy"";d:0.006;s:89:"Breeze\Repository\CommentRepositoryTest::testSave with data set "InvalidCommentException"";d:0;s:93:"Breeze\Repository\CommentRepositoryTest::testGetByProfile with data set "happy happy joy joy"";d:0.001;s:97:"Breeze\Repository\CommentRepositoryTest::testGetByProfile with data set "InvalidCommentException"";d:0;s:89:"Breeze\Repository\CommentRepositoryTest::testGetByProfile with data set "data from query"";d:0;s:81:"Breeze\Repository\CommentRepositoryTest::testGetByProfile with data set "no data"";d:0;s:80:"Breeze\Repository\StatusRepositoryTest::testGetByProfile with data set "no data"";d:0;}}}